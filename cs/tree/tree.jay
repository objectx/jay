%{
  namespace Tree {
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    
    /// <summary>
    ///   demonstrates the use of generics and a factory pattern for tree building.
    /// </summary>
    public class Tree {
%}

%token	<double> Number
%type	<List<Node>> prog
%type   <Node> expr, unary, leaf
%type	<Branch<Node>> binary

%left	'+' '-'
%left	'*' '/'
%right	UNARY

%%

prog: /* null */            { $$ = new List<Node>(); }
    | prog expr '\n'        { $1.Add($2); }
    | prog '\n'
    | prog error '\n'       { yyErrorFlag = 0; }

expr: binary | unary | leaf
    | '(' expr ')'          { $$ = $2; }

binary: expr '+' expr       { $$ = add($1, $3); }
      | expr '-' expr       { $$ = subtract($1, $3); }
      | expr '*' expr       { $$ = multiply($1, $3); }
      | expr '/' expr       { $$ = divide($1, $3); }

unary: '+' expr %prec UNARY { $$ = $2; }
     | '-' expr %prec UNARY { $$ = minus($2); }

leaf: Number                { $$ = leaf($1); }


%%
    /// <summary>
    ///   start with any argument to trace.
    /// </summary>
    public static void Main (string[] args) {
      yyDebug.yyDebug debug =
        args.Length > 0 ? new yyDebug.yyDebugAdapter() : null;
      yyInput scanner = new Scanner(Console.In);
      try {
        List<Node> prog = (List<Node>)new Tree().yyParse(scanner, debug);
        foreach (Node n in prog) Console.WriteLine(n);
      } catch (yyException ye) { Console.WriteLine(ye); }
    }

    /// <summary>
    ///   factory method: represent addition.
    /// </summary>
    protected Add add (Node left, Node right) { return new Add(left, right); }
    /// <summary>
    ///   factory method: represent subtraction.
    /// </summary>
    protected Subtract subtract (Node left, Node right) { return new Subtract(left, right); }
    /// <summary>
    ///   factory method: represent multiplication.
    /// </summary>
    protected Multiply multiply (Node left, Node right) { return new Multiply(left, right); }
    /// <summary>
    ///   factory method: represent division.
    /// </summary>
    protected Divide divide (Node left, Node right) { return new Divide(left, right); }
    /// <summary>
    ///   factory method: represent sign change.
    /// </summary>
    protected Minus minus (Node right) { return new Minus(right); }
    /// <summary>
    ///   factory method: represent <tt>Double</tt> leaf.
    /// </summary>
    protected Leaf leaf (double number) { return new Leaf(number); }
    /// <summary>
    ///   marks tree nodes.
    /// </summary>
    protected interface Node { }
    /// <summary>
    ///   common base class for branch nodes, provides symbolic dump.
    /// </summary>
    protected abstract class Branch<T>: List<T>, Node {
      /// <summary>
      ///   unfortunately, only serially reusable
      /// </summary>
      protected static string indent = "";
      /// <summary>
      ///   returns indented list of class names and leaf values.
      /// </summary>
      public override string ToString () {
        string name = GetType().Name;
        string result = name.Substring(name.LastIndexOf('.')+1);
        indent += "  ";
        foreach (T t in this)
          result += "\n"+indent+t;
        indent = indent.Substring(2);
        return result;
      }
    }
    /// <summary>
    ///   base class for binary operations.
    /// </summary>
    protected abstract class Binary: Branch<Node> {
      protected Binary (Node left, Node right) { Add(left); Add(right); }
    }
    /// <summary>
    ///   represents addition.
    /// </summary>
    protected class Add: Binary {
      protected internal Add (Node left, Node right): base(left, right) { }
    }
    /// <summary>
    ///   represents subtraction.
    /// </summary>
    protected class Subtract: Binary {
      protected internal Subtract (Node left, Node right): base(left, right) { }
    }
    /// <summary>
    ///   represents multiplication.
    /// </summary>
    protected class Multiply: Binary {
      protected internal Multiply (Node left, Node right): base(left, right) { }
    }
    /// <summary>
    ///   represents division.
    /// </summary>
    protected class Divide: Binary {
      protected internal Divide (Node left, Node right): base(left, right) { }
    }
    /// <summary>
    ///   base class for unary operations.
    /// </summary>
    protected abstract class Unary: Branch<Node> {
      protected Unary (Node right) { Add(right); }
    }
    /// <summary>
    ///   represents sign change.
    /// </summary>
    protected class Minus: Unary {
      protected internal Minus (Node right): base(right) { }
    }
    /// <summary>
    ///   represents numeric leaf.
    /// </summary>
    protected class Leaf: List<double>, Node {
      protected internal Leaf (double number) { Add(number); }
      public override string ToString () {
        return "Leaf "+this[0];
      }
    }
 
    /// <summary>
    ///   converts input characters into parser symbols.
    /// </summary>
    public class Scanner: yyInput {
      /// <summary>
      ///   input stream to scan.
      /// </summary>
      protected readonly TextReader In;
      
      /// <summary>
      ///   <c>true</c> once end of input is reached.
      ///   used to disallow further <c>Advance()</c>.
      /// </summary>
      protected bool AtEof = false;
      
      /// <summary>
      ///   represents current <c>Token</c>.
      /// </summary>
      private int token;
      
      /// <summary>
      ///   represents current <c>Value</c>.
      /// </summary>
      private double value;
    
      /// <summary>
      ///   connect input stream.
      /// </summary>
      public Scanner (TextReader In) {
        this.In = In;
      }
    
      /// <summary>
      ///   move on to next token.
      ///   This method does the actual work of cutting up the input sequence.
      /// </summary>
      /// <returns><c>false</c> if positioned beyond tokens</returns>
      /// <exception><c>IOException</c> on input error</exception>
      public bool Advance () {
        int ch;
    
        if (AtEof) return false;
        for (;;)
          switch (ch = In.Read()) {
    
          case -1:
            AtEof = true; return false;
    
          case ' ': case '\t': case '\r':
            continue;
    
          default:
            if (Char.IsDigit((char)ch)) { // support decimal integer values as double
              value = ch - '0';
              while (Char.IsDigit((char)In.Peek())) {
                value *= 10;
                value += In.Read() - '0';
              }
              token = Number; return true;
            }
            value = token = ch; return true;
          }
      }
    
      /// <summary>
      ///   classifies current token by <c>%token</c> value or single character.
      /// </summary>
      /// <remarks>
      ///   Should not be called if <c>Advance()</c> returned false.
      /// </remarks>
      public int Token {
        get { return token; }
      }
  
      /// <summary>
      ///   value associated with current token.
      /// </summary>
      /// <remarks>
      ///   Should not be called if <c>Advance()</c> returned false.
      /// </remarks>
      public object Value {
        get { return this.value; }
      }
    }
  }
}